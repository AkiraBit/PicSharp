name: 'release'

on:
  push:
    branches:
      - release

jobs:
  get-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_note: ${{ steps.get-release-notes.outputs.release_note }}
      release_version: ${{ steps.get-release-notes.outputs.release_version }}

    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./apps/picsharp-app/package.json').version")" >> $GITHUB_ENV
      - name: get release notes
        id: get-release-notes
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const version = require('./apps/picsharp-app/package.json').version;
            console.log('Version:', version);
            const releaseNotesFileContent = fs.readFileSync('./apps/picsharp-app/release-notes.json', 'utf8');
            const releaseNotes = JSON.parse(releaseNotesFileContent).releases[version] || {};
            const notes = releaseNotes.notes || [];
            const releaseNote = notes.map((note, index) => `${index + 1}. ${note}`).join('\n');
            console.log('Formatted release note:', releaseNote);
            core.setOutput('release_version', version);
            core.setOutput('release_note', releaseNote);
  build-app:
    needs: [get-release]
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            config: { args: '--target aarch64-apple-darwin', arch: 'aarch64-apple-darwin' }
          - platform: 'macos-latest'
            config: { args: '--target x86_64-apple-darwin', arch: 'x86_64-apple-darwin' }
          - platform: 'ubuntu-22.04'
            config: { args: '--target x86_64-unknown-linux-gnu', arch: 'x86_64-unknown-linux-gnu' }
          - platform: 'ubuntu-22.04-arm'
            config:
              { args: '--target aarch64-unknown-linux-gnu', arch: 'aarch64-unknown-linux-gnu' }
          - platform: 'windows-latest'
            config: { args: '--target x86_64-pc-windows-msvc', arch: 'x86_64-pc-windows-msvc' }
          # - platform: 'windows-latest'
          #   config:
          #     {
          #       args: '--target aarch64-pc-windows-msvc --bundles nsis',
          #       arch: 'aarch64-pc-windows-msvc',
          #     }
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.5.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.config.arch }}

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: 'apps/picsharp-app/src-tauri -> target'

      - name: Install App Framework (ubuntu only)
        if: contains(matrix.platform, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libfontconfig-dev libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf xdg-utils

      - name: Install Sidecar Dependencies
        shell: bash
        run: |
          if [[ "${{ matrix.config.arch }}" == *"aarch64"* ]]; then
            npm install --cpu arm64
          elif [[ "${{ matrix.config.arch }}" == *"x86_64"* ]]; then
            npm install --cpu x64
          else
            npm install
          fi
        working-directory: packages/picsharp-sidecar

      - name: Find Signing Sidecar Binary
        # if: matrix.platform == 'macos-latest' || matrix.platform == 'windows-latest'
        if: matrix.platform == 'macos-latest'
        id: find-sidecar-binary
        run: |
          if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            echo "macOS: Finding the .node file under node_modules/@img and node_modules/@napi-rs"
            sharp_node_file_path=$(find node_modules/@img -type f -name "*.node" -print -quit 2>/dev/null || true) # -quit makes find exit after the first match. 2>/dev/null suppresses errors if no file is found. `|| true` ensures the command doesn't fail the step if no file is found.
            rs_image_node_file_path=$(find node_modules/@napi-rs -type f -name "*.node" -print -quit 2>/dev/null || true) # -quit makes find exit after the first match. 2>/dev/null suppresses errors if no file is found. `|| true` ensures the command doesn't fail the step if no file is found.

            if [[ -n "$sharp_node_file_path" ]]; then
              echo "Found sharp .node file: $sharp_node_file_path"
              echo "sharp_node_file=packages/picsharp-sidecar/$sharp_node_file_path" >> $GITHUB_OUTPUT
            else
              echo "No sharp .node files found."
              echo "sharp_node_file=" >> $GITHUB_OUTPUT
            fi

            if [[ -n "$rs_image_node_file_path" ]]; then
              echo "Found rs-image .node file: $rs_image_node_file_path"
              echo "rs_image_node_file=packages/picsharp-sidecar/$rs_image_node_file_path" >> $GITHUB_OUTPUT
            else
              echo "No rs-image .node files found."
              echo "rs_image_node_file=" >> $GITHUB_OUTPUT
            fi

            echo "macOS: Finding the .dylib file under node_modules/@img"
            sharp_dylib_file_path=$(find node_modules/@img -type f -name "*.dylib" -print -quit 2>/dev/null || true) # -quit makes find exit after the first match. 2>/dev/null suppresses errors if no file is found. `|| true` ensures the command doesn't fail the step if no file is found.

            if [[ -n "$sharp_dylib_file_path" ]]; then
              echo "Found sharp .dylib file: $sharp_dylib_file_path"
              echo "sharp_dylib_file=packages/picsharp-sidecar/$sharp_dylib_file_path" >> $GITHUB_OUTPUT
            else
              echo "No sharp .dylib files found."
              echo "sharp_dylib_file=" >> $GITHUB_OUTPUT
            fi
          elif [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            echo "Windows: Finding the .node file under node_modules/@img and node_modules/@napi-rs"
            sharp_node_file_path=$(find node_modules/@img -type f -name "*.node" -print -quit 2>/dev/null || true) # -quit makes find exit after the first match. 2>/dev/null suppresses errors if no file is found. `|| true` ensures the command doesn't fail the step if no file is found.
            rs_image_node_file_path=$(find node_modules/@napi-rs -type f -name "*.node" -print -quit 2>/dev/null || true) # -quit makes find exit after the first match. 2>/dev/null suppresses errors if no file is found. `|| true` ensures the command doesn't fail the step if no file is found.

            if [[ -n "$sharp_node_file_path" ]]; then
              echo "Found sharp .node file: $sharp_node_file_path"
              echo "sharp_node_file=packages/picsharp-sidecar/$sharp_node_file_path" >> $GITHUB_OUTPUT
            else
              echo "No sharp .node files found."
              echo "sharp_node_file=" >> $GITHUB_OUTPUT
            fi

            if [[ -n "$rs_image_node_file_path" ]]; then
              echo "Found rs-image .node file: $rs_image_node_file_path"
              echo "rs_image_node_file=packages/picsharp-sidecar/$rs_image_node_file_path" >> $GITHUB_OUTPUT
            else
              echo "No rs-image .node files found."
              echo "rs_image_node_file=" >> $GITHUB_OUTPUT
            fi

            echo "Windows: Finding the sharp .dll file under node_modules/@img"
            sharp_dll_file_path=$(find node_modules/@img -type f -name "*.dll" -print -quit 2>/dev/null || true) # -quit makes find exit after the first match. 2>/dev/null suppresses errors if no file is found. `|| true` ensures the command doesn't fail the step if no file is found.

            if [[ -n "$sharp_dll_file_path" ]]; then
              echo "Found sharp .dll file: $sharp_dll_file_path"
              echo "sharp_dll_file=packages/picsharp-sidecar/$sharp_dll_file_path" >> $GITHUB_OUTPUT
            else
              echo "No sharp .dll files found."
              echo "sharp_dll_file=" >> $GITHUB_OUTPUT
            fi
          fi
        working-directory: packages/picsharp-sidecar

      - name: Code Signing Sidecar Sharp .node Binary (MacOS Only)
        if: matrix.platform == 'macos-latest'
        uses: lando/code-sign-action@v3
        with:
          file: ${{ steps.find-sidecar-binary.outputs.sharp_node_file }}
          certificate-data: ${{ secrets.APPLE_CERTIFICATE }}
          certificate-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          certificate-id: ${{ secrets.APPLE_TEAM_ID }}

      - name: Clean up macos-build.keychain
        if: matrix.platform == 'macos-latest'
        run: |
          echo "üîç Checking for existing macos-build.keychain..."
          if security list-keychains -d user | grep -q "macos-build.keychain"; then
            echo "‚úÖ Removing macos-build.keychain from keychain list..."
            security list-keychains -s $(security list-keychains -d user | grep -v "macos-build.keychain")
          else
            echo "‚ùå macos-build.keychain not found in keychain list."
          fi

          echo "üóëÔ∏è Deleting macos-build.keychain files..."
          rm -f ~/Library/Keychains/macos-build.keychain ~/Library/Keychains/macos-build.keychain-db

          echo "‚úÖ Cleanup complete."

      - name: Code Signing Sidecar rs-image .node Binary (MacOS Only)
        if: matrix.platform == 'macos-latest'
        uses: lando/code-sign-action@v3
        with:
          file: ${{ steps.find-sidecar-binary.outputs.rs_image_node_file }}
          certificate-data: ${{ secrets.APPLE_CERTIFICATE }}
          certificate-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          certificate-id: ${{ secrets.APPLE_TEAM_ID }}

      - name: Clean up macos-build.keychain
        if: matrix.platform == 'macos-latest'
        run: |
          echo "üîç Checking for existing macos-build.keychain..."
          if security list-keychains -d user | grep -q "macos-build.keychain"; then
            echo "‚úÖ Removing macos-build.keychain from keychain list..."
            security list-keychains -s $(security list-keychains -d user | grep -v "macos-build.keychain")
          else
            echo "‚ùå macos-build.keychain not found in keychain list."
          fi

          echo "üóëÔ∏è Deleting macos-build.keychain files..."
          rm -f ~/Library/Keychains/macos-build.keychain ~/Library/Keychains/macos-build.keychain-db

          echo "‚úÖ Cleanup complete."

      - name: Code Signing Sidecar Sharp .dylib Binary (MacOS Only)
        if: matrix.platform == 'macos-latest'
        uses: lando/code-sign-action@v3
        with:
          file: ${{ steps.find-sidecar-binary.outputs.sharp_dylib_file }}
          certificate-data: ${{ secrets.APPLE_CERTIFICATE }}
          certificate-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          certificate-id: ${{ secrets.APPLE_TEAM_ID }}

      - name: Clean up macos-build.keychain
        if: matrix.platform == 'macos-latest'
        run: |
          echo "üîç Checking for existing macos-build.keychain..."
          if security list-keychains -d user | grep -q "macos-build.keychain"; then
            echo "‚úÖ Removing macos-build.keychain from keychain list..."
            security list-keychains -s $(security list-keychains -d user | grep -v "macos-build.keychain")
          else
            echo "‚ùå macos-build.keychain not found in keychain list."
          fi

          echo "üóëÔ∏è Deleting macos-build.keychain files..."
          rm -f ~/Library/Keychains/macos-build.keychain ~/Library/Keychains/macos-build.keychain-db

          echo "‚úÖ Cleanup complete."

      - name: Build sidecar
        shell: bash
        run: |
          if [[ "${{ matrix.config.arch }}" == "aarch64-apple-darwin" ]]; then
            npm run build-sea:macos-arm64
          elif [[ "${{ matrix.config.arch }}" == "x86_64-apple-darwin" ]]; then
            npm run build-sea:macos-x64
          elif [[ "${{ matrix.config.arch }}" == "x86_64-pc-windows-msvc" ]]; then
            npm run build-sea:win-x64
          elif [[ "${{ matrix.config.arch }}" == "aarch64-pc-windows-msvc" ]]; then
            npm run build-sea:win-arm64
          elif [[ "${{ matrix.config.arch }}" == "x86_64-unknown-linux-gnu" ]]; then
            npm run build-sea:linux-x64
          elif [[ "${{ matrix.config.arch }}" == "aarch64-unknown-linux-gnu" ]]; then
            npm run build-sea:linux-arm64
          fi
        working-directory: packages/picsharp-sidecar

      - name: Move sidecar binary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const platform = process.env.MATRIX_PLATFORM;
            const arch = process.env.MATRIX_CONFIG_ARCH;

            core.info(`Platform: ${platform}, Architecture: ${arch}`);

            let ext = platform === "windows-latest" ? ".exe" : "";

            const sourceDir = 'packages/picsharp-sidecar/bin';
            const destDir = 'apps/picsharp-app/src-tauri/binaries';

            const sourceFile = path.join(sourceDir, `picsharp-sidecar-${arch}${ext}`);
            const destFile = path.join(destDir, `picsharp-sidecar-${arch}${ext}`);

            core.info(`Source file: ${sourceFile}`);
            core.info(`Destination file: ${destFile}`);

            try {
              fs.mkdirSync(destDir, { recursive: true });
              fs.copyFileSync(sourceFile, destFile);
            } catch (error) {
              core.setFailed(`Failed to move sidecar binary: ${error.message}`);
            }
        env:
          MATRIX_PLATFORM: ${{ matrix.platform }}
          MATRIX_CONFIG_ARCH: ${{ matrix.config.arch }}

      - name: Install frontend dependencies for main app
        run: npm install
        working-directory: apps/picsharp-app

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          NODE_OPTIONS: '--max-old-space-size=8192'
        with:
          projectPath: apps/picsharp-app
          tagName: v__VERSION__
          releaseName: 'PicSharp v__VERSION__'
          releaseBody: ${{ needs.get-release.outputs.release_note }}
          args: ${{ matrix.config.args || '' }}

      - name: upload release notes to GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Uploading release notes to GitHub release"
          gh release upload v${{ needs.get-release.outputs.release_version }} apps/picsharp-app/release-notes.json --clobber
