name: 'release'

on:
  push:
    branches:
      - release

jobs:
  build-app:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            config: { args: '--target aarch64-apple-darwin', arch: 'aarch64-apple-darwin' }
          - platform: 'macos-latest'
            config: { args: '--target x86_64-apple-darwin', arch: 'x86_64-apple-darwin' }
          # - platform: 'ubuntu-22.04'
          #   config: { args: '' } # Ensuring config.args is always defined
          # - platform: 'windows-latest'
          #   config: { args: '' } # Ensuring config.args is always defined
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.5.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ (matrix.platform == 'macos-latest' && format('{0},{1}', matrix.config.args == '--target aarch64-apple-darwin' && 'aarch64-apple-darwin' || '', matrix.config.args == '--target x86_64-apple-darwin' && 'x86_64-apple-darwin' || '')) || '' }}

      - uses: Swatinem/rust-cache@v2
        # with:
        #   key: ${{ matrix.config.os }}-${{ matrix.config.release }}-${{ matrix.config.arch }}-cargo
        with:
          workspaces: 'apps/picsharp-app/src-tauri -> target'

      - name: Install App Framework (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install Sidecar Dependencies
        run: npm install
        working-directory: packages/picsharp-sidecar

      - name: Find Signing Sidecar Binary
        id: find-sidecar-binary
        run: |
          if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            echo "macOS: Finding the .node file under node_modules/@img"
            node_file_path=$(find node_modules/@img -type f -name "*.node" -print -quit 2>/dev/null || true) # -quit makes find exit after the first match. 2>/dev/null suppresses errors if no file is found. `|| true` ensures the command doesn't fail the step if no file is found.

            if [[ -n "$node_file_path" ]]; then
              echo "Found .node file: $node_file_path"
              echo "node_file=packages/picsharp-sidecar/$node_file_path" >> $GITHUB_OUTPUT
            else
              echo "No .node files found."
              echo "node_file=" >> $GITHUB_OUTPUT
            fi

            echo "macOS: Finding the .dylib file under node_modules/@img"
            dylib_file_path=$(find node_modules/@img -type f -name "*.dylib" -print -quit 2>/dev/null || true) # -quit makes find exit after the first match. 2>/dev/null suppresses errors if no file is found. `|| true` ensures the command doesn't fail the step if no file is found.

            if [[ -n "$dylib_file_path" ]]; then
              echo "Found .dylib file: $dylib_file_path"
              echo "dylib_file=packages/picsharp-sidecar/$dylib_file_path" >> $GITHUB_OUTPUT
            else
              echo "No .dylib files found."
              echo "dylib_file=" >> $GITHUB_OUTPUT
            fi
          fi
        working-directory: packages/picsharp-sidecar

      - name: Code Signing Sidecar .node Binary (MacOS Only)
        if: matrix.platform == 'macos-latest'
        uses: lando/code-sign-action@v3
        with:
          file: ${{ steps.find-sidecar-binary.outputs.node_file }}
          certificate-data: ${{ secrets.APPLE_CERTIFICATE }}
          certificate-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          certificate-id: ${{ secrets.APPLE_TEAM_ID }}

      - name: Clean up macos-build.keychain
        if: matrix.platform == 'macos-latest'
        run: |
          echo "üîç Checking for existing macos-build.keychain..."
          if security list-keychains -d user | grep -q "macos-build.keychain"; then
            echo "‚úÖ Removing macos-build.keychain from keychain list..."
            security list-keychains -s $(security list-keychains -d user | grep -v "macos-build.keychain")
          else
            echo "‚ùå macos-build.keychain not found in keychain list."
          fi

          echo "üóëÔ∏è Deleting macos-build.keychain files..."
          rm -f ~/Library/Keychains/macos-build.keychain ~/Library/Keychains/macos-build.keychain-db

          echo "‚úÖ Cleanup complete."

      - name: Code Signing Sidecar .dylib Binary (MacOS Only)
        if: matrix.platform == 'macos-latest'
        uses: lando/code-sign-action@v3
        with:
          file: ${{ steps.find-sidecar-binary.outputs.dylib_file }}
          certificate-data: ${{ secrets.APPLE_CERTIFICATE }}
          certificate-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          certificate-id: ${{ secrets.APPLE_TEAM_ID }}

      - name: Clean up macos-build.keychain
        if: matrix.platform == 'macos-latest'
        run: |
          echo "üîç Checking for existing macos-build.keychain..."
          if security list-keychains -d user | grep -q "macos-build.keychain"; then
            echo "‚úÖ Removing macos-build.keychain from keychain list..."
            security list-keychains -s $(security list-keychains -d user | grep -v "macos-build.keychain")
          else
            echo "‚ùå macos-build.keychain not found in keychain list."
          fi

          echo "üóëÔ∏è Deleting macos-build.keychain files..."
          rm -f ~/Library/Keychains/macos-build.keychain ~/Library/Keychains/macos-build.keychain-db

          echo "‚úÖ Cleanup complete."

      - name: Build sidecar
        run: |
          if [[ "${{ matrix.config.arch }}" == "aarch64-apple-darwin" ]]; then
            npm run build-sea:macos-arm64
          elif [[ "${{ matrix.config.arch }}" == "x86_64-apple-darwin" ]]; then
            npm run build-sea:macos-x64
          fi
        working-directory: packages/picsharp-sidecar

      - name: Move sidecar binary
        shell: bash
        run: |
          EXT=""
          if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            EXT=".exe"
          fi
          mkdir -p apps/picsharp-app/src-tauri/binaries
          mv packages/picsharp-sidecar/bin/picsharp-sidecar-${{ matrix.config.arch }}$EXT apps/picsharp-app/src-tauri/binaries/picsharp-sidecar-${{ matrix.config.arch }}$EXT

      - name: Install frontend dependencies for main app
        run: npm install # Assuming main app uses yarn as in original file, or change to npm if needed
        working-directory: apps/picsharp-app # User specified projectPath

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          NODE_OPTIONS: '--max-old-space-size=8192'
        with:
          projectPath: apps/picsharp-app
          tagName: v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'PicSharp v__VERSION__'
          releaseId: '1.0.0'
          releaseBody: 'First release'
          args: ${{ matrix.config.args || '' }}
